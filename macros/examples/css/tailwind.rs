// This is an example of a wrapper module you could write for use in your
// application.

// This is the code generated by tailwindcss-to-rust tool.
use crate::css::generated;
// We want to re-export these as-is.
pub use tailwindcss_to_rust_macros::*;

// Same here, this can be re-exported as is.
pub(crate) const M: generated::Modifiers = generated::MODIFIERS;

// You might not end up using all of these fields.
#[allow(dead_code)]
pub(crate) struct C {
    // You can name these fields anything you want. You probably want to keep
    // them short since you'll be typing them a lot.
    pub(crate) acc: generated::Accessibility,
    pub(crate) anim: generated::Animation,
    pub(crate) asp: generated::Aspect,
    pub(crate) bg: generated::Backgrounds,
    pub(crate) bor: generated::Borders,
    pub(crate) eff: generated::Effects,
    pub(crate) fil: generated::Filters,
    pub(crate) fg: generated::FlexAndGrid,
    pub(crate) intr: generated::Interactivity,
    pub(crate) lay: generated::Layout,
    pub(crate) siz: generated::Sizing,
    pub(crate) spc: generated::Spacing,
    pub(crate) tbl: generated::Tables,
    pub(crate) typ: generated::Typography,
}

pub(crate) const C: C = C {
    acc: generated::ACCESSIBILITY,
    anim: generated::ANIMATION,
    asp: generated::ASPECT,
    bg: generated::BACKGROUNDS,
    bor: generated::BORDERS,
    eff: generated::EFFECTS,
    fil: generated::FILTERS,
    fg: generated::FLEX_AND_GRID,
    intr: generated::INTERACTIVITY,
    lay: generated::LAYOUT,
    siz: generated::SIZING,
    spc: generated::SPACING,
    tbl: generated::TABLES,
    typ: generated::TYPOGRAPHY,
};
